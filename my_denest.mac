/* Maxima code for denesting some radicals
   
   Copyright 2022, Barton Willis

   This program is free software: you can redistribute it and/or modify it under the 
   terms of the GNU General Public License as published by the Free Software Foundation, 
   either version 3 of the License, or (at your option) any later version. This 
   program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
   PURPOSE. See the GNU General Public License for more details.You should have 
   received a copy of the GNU General Public License along with this 
   program. If not, see <https://www.gnu.org/licenses/>. 
*/   

/* Predicates for identifying +, *, and ^ expressions. */

mplusp(e) := not mapatom(e) and inpart(e,0) = "+";

mtimesp(e) := not mapatom(e) and inpart(e,0) = "*";

mexptp(e) := not mapatom(e) and inpart(e,0) = "^";

map('load, [to_poly_solve, "opsubst"]);

/* First, gfactor eq. Second, for every term in e of the form a^q, where a 
   and q are rational, factor eq over the field of rationals with 
   g^denom(q) - a adjoined. After factoring, replace g by a^(1/denom(q)). */
algebraic_factor(eq,e) := block([g : gensym()],
   eq : gfactor(eq),
   e : gatherargs(e,"^"),
   e : sublist(e, lambda([q], ratnump(first(q)) and ratnump(second(q)))),
   e : setify(e),
   for ek in e do (
      eq : factor(eq, g^denom(second(ek)) - first(ek)),
      eq : subst(first(ek)^(1/denom(second(ek))),g,eq)),
   eq);

/* Solve e for x with:
   (1) algexact : true 
   (2) solveexplicit : true 
   (3) solvedecomposes : true
*/
solve_special_environment(e,x) := block([algexact : true, solveexplicit : true, 
  solvedecomposes : true],  
   solve(e,x));

/* The sqrtdenest function isn't in core for some Maxima versions, so conditionally 
   load sqdnst. I don't know a way to test this using user level functions.*/
if not ?get('sqrtdenest, '?impl\-name) then load(sqdnst);

/* Return q*exp(2iπk/n), where k is an integer that makes arg(q*exp(2iπk/n)) 
   a member of (-π/n,π]. If Maxima fails to find such an integer k, return false.*/
  principalize_root(q,n) := block([k],
      k : floor(1/2 - n*carg(q)/(2*%pi)),
      if integerp(k) then demoivre(exp(2*%pi*%i*k/n))*q else false);

/* Check that q^n = e. experimentaly, we'll allow a numerical test.
   The numerical test uses 107 digits--it's a magic number with no real reason.*/
check_root(q,n,e) := block([rootsconmode : 'all],
   is(equal(rootscontract(expand(q^n)),e)) or numerically_equal(q^n,e,107));

/* To help solve find un-nested solutions, we will precondition the
   equations using algebraic_factor (that also automatically calls gfactor). */

denest_helper(e,n) := block([eq, ee : false, g : gensym(),sol],
   /* try sqrtdenest*/
  
   if n = 2 then (
      ee : sqrtdenest(sqrt(e))),

   if surd_p(ee) then ee
   else (  
   /* eq = polynomial with one solution is g = e^(1/n). */
	eq : first(to_poly(e - g^n,[g,1])),        
	eq : first(first(elim_allbut(eq, g))),
	/* Solve eq for g. We hope that solve returns non-nested radicals when possible.*/ 
   eq : algebraic_factor(eq,e),
   sol : solve_special_environment(eq,g),

   /* Build the list of solutions [aaa,bbb, ...] instead of [g = aaa, g = bbb, ...]. 
	   Also, remove redundant solutions. */
	sol : map(lambda([solk], subst(solk,g)), unique(sol)),
   
	/* Remove solutions that are not complex numbers or surds */
	sol : sublist(sol, lambda([q], complex_number_p(q) or surd_p(q))), 
   
   /* Remove spurious roots */
   sol : sublist(sol, lambda([q], check_root(q,n,e))),
	/* Convert non-spurious roots to the principal root. Spurious roots
      are converted to false, so delete false from the result of mapping. */
   sol : map(lambda([s], principalize_root(s,n)), sol),
   sol : delete(false, sol), 

   /* When no solutions are found, push denest_pslq(e,n) onto the sol. 
      When denest_pslq(e,n) fails to denest, it returns [e^(1/n)]. */
   if emptyp(sol) then push(denest_pslq(e,n),sol),
   /* Return the first member of sol. */
    first(sol)));

/* Return true iff e is a complex number whose real and imaginary parts are
   rational numbers.*/
complex_rational_p(e) :=
  complex_number_p(e) and ratnump(realpart(e)) and ratnump(imagpart(e));
  
/* Return true iff e is a sum of complex rational numbers and terms of the form
   n^(p/q), where p & q are integers and n is a complex rational number.*/
surd_p(e):=block([inflag:true],
    xreduce("or",
    [complex_rational_p(e),
     (mexptp(e) and complex_rational_p(first(e)) and ratnump(second(e)) and 
	       not integerp(second(e))),
     ((mplusp(e) or mtimesp(e)) and every('surd_p,args(e)))]));

denest_single_radical(e) := block([opsubst : true, inflag : true],
    subst("^" = lambda([a,b], if surd_p(a) and ratnump(b) then denest_helper(a,denom(b))^num(b) else a^b), e)); 

denest(e) := scanmap(lambda([q], ratsimp(denest_single_radical(q))), e, 'bottomup);

/* experimental and untested. */

load(pslq_integer_relation); 

/* The option variables pslq_precision, pslq_threshold, and pslq_depth might need
   to be set--also what about fpprec ?*/

load("hypergeometric");

/* Return true if the floating point values of both the real and imaginary 
   parts of p & q test equal within a tolerance of 1/10^digits.*/
numerically_equal(p,q, digits) := block([float_approx_equal_tolerance : float(1/10^(digits))], 
   p : nfloat(p,[], digits+8), /* magic number: extra 8 digits */
   q : nfloat(q,[], digits+8),
   float_approx_equal(realpart(p),realpart(q)) and 
   float_approx_equal(imagpart(p),imagpart(q)));

denest_pslq(e,n) := block([er,ei,ans, rootsconmode : 'all],
  er : denest_pslq_real(realpart(e^(1/n)), realpart(e), n),
  ei : if er = false then false else denest_pslq_real(imagpart(e^(1/n)), imagpart(e), n),
  if er=false or ei=false then (
     e^(1/n))
  else (
     ans : er + %i*ei,
     if is(equal(rootscontract(expand(ans^n)),e)) or numerically_equal(ans, e^(1/n), 107) then (
            principalize_root(ans,n))
     else e^(1/n)));

/* Return an _unchecked_ answer; if no answer, return false */
denest_pslq_real(ee,e,n) := block([L,listarith : true, sol],
   e : rootscontract(expand(e)),
   L : gatherargs(e,"^"),
   L : sublist(L, lambda([q], ratnump(first(q)) and ratnump(second(q)))),
   L : map(lambda([s], first(abs(s))^(1/denom(second(s)))),L),
   L : unique(L),
   if L = [] then (
      ee)
   else (   
      push(1,L),
      push(-ee,L),
      /* need to catch errors,  I think */
      sol : pslq_integer_relation(L), 
      if listp(sol) then (
         sol : rest(sol) . rest(L) / first(sol))
      else false));   
  
